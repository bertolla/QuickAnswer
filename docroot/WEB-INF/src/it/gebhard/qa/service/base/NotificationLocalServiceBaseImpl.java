/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.gebhard.qa.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import it.gebhard.qa.model.Notification;
import it.gebhard.qa.service.AnswerLocalService;
import it.gebhard.qa.service.CommentLocalService;
import it.gebhard.qa.service.GuestUserLocalService;
import it.gebhard.qa.service.NotificationLocalService;
import it.gebhard.qa.service.QuestionLocalService;
import it.gebhard.qa.service.TagLocalService;
import it.gebhard.qa.service.VoteLocalService;
import it.gebhard.qa.service.persistence.AnswerPersistence;
import it.gebhard.qa.service.persistence.CommentPersistence;
import it.gebhard.qa.service.persistence.GuestUserPersistence;
import it.gebhard.qa.service.persistence.NotificationPersistence;
import it.gebhard.qa.service.persistence.QuestionFinder;
import it.gebhard.qa.service.persistence.QuestionPersistence;
import it.gebhard.qa.service.persistence.TagPersistence;
import it.gebhard.qa.service.persistence.VotePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the Notification local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link it.gebhard.qa.service.impl.NotificationLocalServiceImpl}.
 * </p>
 *
 * @author Philipp Gebhard
 * @see it.gebhard.qa.service.impl.NotificationLocalServiceImpl
 * @see it.gebhard.qa.service.NotificationLocalServiceUtil
 * @generated
 */
public abstract class NotificationLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements NotificationLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link it.gebhard.qa.service.NotificationLocalServiceUtil} to access the Notification local service.
	 */

	/**
	 * Adds the Notification to the database. Also notifies the appropriate model listeners.
	 *
	 * @param notification the Notification
	 * @return the Notification that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Notification addNotification(Notification notification)
		throws SystemException {
		notification.setNew(true);

		return notificationPersistence.update(notification, false);
	}

	/**
	 * Creates a new Notification with the primary key. Does not add the Notification to the database.
	 *
	 * @param notificationId the primary key for the new Notification
	 * @return the new Notification
	 */
	public Notification createNotification(long notificationId) {
		return notificationPersistence.create(notificationId);
	}

	/**
	 * Deletes the Notification with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param notificationId the primary key of the Notification
	 * @return the Notification that was removed
	 * @throws PortalException if a Notification with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public Notification deleteNotification(long notificationId)
		throws PortalException, SystemException {
		return notificationPersistence.remove(notificationId);
	}

	/**
	 * Deletes the Notification from the database. Also notifies the appropriate model listeners.
	 *
	 * @param notification the Notification
	 * @return the Notification that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public Notification deleteNotification(Notification notification)
		throws SystemException {
		return notificationPersistence.remove(notification);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Notification.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return notificationPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return notificationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return notificationPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return notificationPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public Notification fetchNotification(long notificationId)
		throws SystemException {
		return notificationPersistence.fetchByPrimaryKey(notificationId);
	}

	/**
	 * Returns the Notification with the primary key.
	 *
	 * @param notificationId the primary key of the Notification
	 * @return the Notification
	 * @throws PortalException if a Notification with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public Notification getNotification(long notificationId)
		throws PortalException, SystemException {
		return notificationPersistence.findByPrimaryKey(notificationId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return notificationPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the Notifications.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of Notifications
	 * @param end the upper bound of the range of Notifications (not inclusive)
	 * @return the range of Notifications
	 * @throws SystemException if a system exception occurred
	 */
	public List<Notification> getNotifications(int start, int end)
		throws SystemException {
		return notificationPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of Notifications.
	 *
	 * @return the number of Notifications
	 * @throws SystemException if a system exception occurred
	 */
	public int getNotificationsCount() throws SystemException {
		return notificationPersistence.countAll();
	}

	/**
	 * Updates the Notification in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param notification the Notification
	 * @return the Notification that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Notification updateNotification(Notification notification)
		throws SystemException {
		return updateNotification(notification, true);
	}

	/**
	 * Updates the Notification in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param notification the Notification
	 * @param merge whether to merge the Notification with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the Notification that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public Notification updateNotification(Notification notification,
		boolean merge) throws SystemException {
		notification.setNew(false);

		return notificationPersistence.update(notification, merge);
	}

	/**
	 * Returns the Answer local service.
	 *
	 * @return the Answer local service
	 */
	public AnswerLocalService getAnswerLocalService() {
		return answerLocalService;
	}

	/**
	 * Sets the Answer local service.
	 *
	 * @param answerLocalService the Answer local service
	 */
	public void setAnswerLocalService(AnswerLocalService answerLocalService) {
		this.answerLocalService = answerLocalService;
	}

	/**
	 * Returns the Answer persistence.
	 *
	 * @return the Answer persistence
	 */
	public AnswerPersistence getAnswerPersistence() {
		return answerPersistence;
	}

	/**
	 * Sets the Answer persistence.
	 *
	 * @param answerPersistence the Answer persistence
	 */
	public void setAnswerPersistence(AnswerPersistence answerPersistence) {
		this.answerPersistence = answerPersistence;
	}

	/**
	 * Returns the Comment local service.
	 *
	 * @return the Comment local service
	 */
	public CommentLocalService getCommentLocalService() {
		return commentLocalService;
	}

	/**
	 * Sets the Comment local service.
	 *
	 * @param commentLocalService the Comment local service
	 */
	public void setCommentLocalService(CommentLocalService commentLocalService) {
		this.commentLocalService = commentLocalService;
	}

	/**
	 * Returns the Comment persistence.
	 *
	 * @return the Comment persistence
	 */
	public CommentPersistence getCommentPersistence() {
		return commentPersistence;
	}

	/**
	 * Sets the Comment persistence.
	 *
	 * @param commentPersistence the Comment persistence
	 */
	public void setCommentPersistence(CommentPersistence commentPersistence) {
		this.commentPersistence = commentPersistence;
	}

	/**
	 * Returns the GuestUser local service.
	 *
	 * @return the GuestUser local service
	 */
	public GuestUserLocalService getGuestUserLocalService() {
		return guestUserLocalService;
	}

	/**
	 * Sets the GuestUser local service.
	 *
	 * @param guestUserLocalService the GuestUser local service
	 */
	public void setGuestUserLocalService(
		GuestUserLocalService guestUserLocalService) {
		this.guestUserLocalService = guestUserLocalService;
	}

	/**
	 * Returns the GuestUser persistence.
	 *
	 * @return the GuestUser persistence
	 */
	public GuestUserPersistence getGuestUserPersistence() {
		return guestUserPersistence;
	}

	/**
	 * Sets the GuestUser persistence.
	 *
	 * @param guestUserPersistence the GuestUser persistence
	 */
	public void setGuestUserPersistence(
		GuestUserPersistence guestUserPersistence) {
		this.guestUserPersistence = guestUserPersistence;
	}

	/**
	 * Returns the Notification local service.
	 *
	 * @return the Notification local service
	 */
	public NotificationLocalService getNotificationLocalService() {
		return notificationLocalService;
	}

	/**
	 * Sets the Notification local service.
	 *
	 * @param notificationLocalService the Notification local service
	 */
	public void setNotificationLocalService(
		NotificationLocalService notificationLocalService) {
		this.notificationLocalService = notificationLocalService;
	}

	/**
	 * Returns the Notification persistence.
	 *
	 * @return the Notification persistence
	 */
	public NotificationPersistence getNotificationPersistence() {
		return notificationPersistence;
	}

	/**
	 * Sets the Notification persistence.
	 *
	 * @param notificationPersistence the Notification persistence
	 */
	public void setNotificationPersistence(
		NotificationPersistence notificationPersistence) {
		this.notificationPersistence = notificationPersistence;
	}

	/**
	 * Returns the Question local service.
	 *
	 * @return the Question local service
	 */
	public QuestionLocalService getQuestionLocalService() {
		return questionLocalService;
	}

	/**
	 * Sets the Question local service.
	 *
	 * @param questionLocalService the Question local service
	 */
	public void setQuestionLocalService(
		QuestionLocalService questionLocalService) {
		this.questionLocalService = questionLocalService;
	}

	/**
	 * Returns the Question persistence.
	 *
	 * @return the Question persistence
	 */
	public QuestionPersistence getQuestionPersistence() {
		return questionPersistence;
	}

	/**
	 * Sets the Question persistence.
	 *
	 * @param questionPersistence the Question persistence
	 */
	public void setQuestionPersistence(QuestionPersistence questionPersistence) {
		this.questionPersistence = questionPersistence;
	}

	/**
	 * Returns the Question finder.
	 *
	 * @return the Question finder
	 */
	public QuestionFinder getQuestionFinder() {
		return questionFinder;
	}

	/**
	 * Sets the Question finder.
	 *
	 * @param questionFinder the Question finder
	 */
	public void setQuestionFinder(QuestionFinder questionFinder) {
		this.questionFinder = questionFinder;
	}

	/**
	 * Returns the Tag local service.
	 *
	 * @return the Tag local service
	 */
	public TagLocalService getTagLocalService() {
		return tagLocalService;
	}

	/**
	 * Sets the Tag local service.
	 *
	 * @param tagLocalService the Tag local service
	 */
	public void setTagLocalService(TagLocalService tagLocalService) {
		this.tagLocalService = tagLocalService;
	}

	/**
	 * Returns the Tag persistence.
	 *
	 * @return the Tag persistence
	 */
	public TagPersistence getTagPersistence() {
		return tagPersistence;
	}

	/**
	 * Sets the Tag persistence.
	 *
	 * @param tagPersistence the Tag persistence
	 */
	public void setTagPersistence(TagPersistence tagPersistence) {
		this.tagPersistence = tagPersistence;
	}

	/**
	 * Returns the Vote local service.
	 *
	 * @return the Vote local service
	 */
	public VoteLocalService getVoteLocalService() {
		return voteLocalService;
	}

	/**
	 * Sets the Vote local service.
	 *
	 * @param voteLocalService the Vote local service
	 */
	public void setVoteLocalService(VoteLocalService voteLocalService) {
		this.voteLocalService = voteLocalService;
	}

	/**
	 * Returns the Vote persistence.
	 *
	 * @return the Vote persistence
	 */
	public VotePersistence getVotePersistence() {
		return votePersistence;
	}

	/**
	 * Sets the Vote persistence.
	 *
	 * @param votePersistence the Vote persistence
	 */
	public void setVotePersistence(VotePersistence votePersistence) {
		this.votePersistence = votePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		PersistedModelLocalServiceRegistryUtil.register("it.gebhard.qa.model.Notification",
			notificationLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"it.gebhard.qa.model.Notification");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
	}

	protected Class<?> getModelClass() {
		return Notification.class;
	}

	protected String getModelClassName() {
		return Notification.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = notificationPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AnswerLocalService.class)
	protected AnswerLocalService answerLocalService;
	@BeanReference(type = AnswerPersistence.class)
	protected AnswerPersistence answerPersistence;
	@BeanReference(type = CommentLocalService.class)
	protected CommentLocalService commentLocalService;
	@BeanReference(type = CommentPersistence.class)
	protected CommentPersistence commentPersistence;
	@BeanReference(type = GuestUserLocalService.class)
	protected GuestUserLocalService guestUserLocalService;
	@BeanReference(type = GuestUserPersistence.class)
	protected GuestUserPersistence guestUserPersistence;
	@BeanReference(type = NotificationLocalService.class)
	protected NotificationLocalService notificationLocalService;
	@BeanReference(type = NotificationPersistence.class)
	protected NotificationPersistence notificationPersistence;
	@BeanReference(type = QuestionLocalService.class)
	protected QuestionLocalService questionLocalService;
	@BeanReference(type = QuestionPersistence.class)
	protected QuestionPersistence questionPersistence;
	@BeanReference(type = QuestionFinder.class)
	protected QuestionFinder questionFinder;
	@BeanReference(type = TagLocalService.class)
	protected TagLocalService tagLocalService;
	@BeanReference(type = TagPersistence.class)
	protected TagPersistence tagPersistence;
	@BeanReference(type = VoteLocalService.class)
	protected VoteLocalService voteLocalService;
	@BeanReference(type = VotePersistence.class)
	protected VotePersistence votePersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private NotificationLocalServiceClpInvoker _clpInvoker = new NotificationLocalServiceClpInvoker();
}