/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.gebhard.qa.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.gebhard.qa.model.Vote;
import it.gebhard.qa.model.VoteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Vote service. Represents a row in the &quot;QuickAnswer_Vote&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.gebhard.qa.model.VoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VoteImpl}.
 * </p>
 *
 * @author Philipp Gebhard
 * @see VoteImpl
 * @see it.gebhard.qa.model.Vote
 * @see it.gebhard.qa.model.VoteModel
 * @generated
 */
public class VoteModelImpl extends BaseModelImpl<Vote> implements VoteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a Vote model instance should use the {@link it.gebhard.qa.model.Vote} interface instead.
	 */
	public static final String TABLE_NAME = "QuickAnswer_Vote";
	public static final Object[][] TABLE_COLUMNS = {
			{ "voteId", Types.BIGINT },
			{ "questionId", Types.BIGINT },
			{ "answerId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "plusOne", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table QuickAnswer_Vote (voteId LONG not null primary key,questionId LONG,answerId LONG,userId LONG,plusOne BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table QuickAnswer_Vote";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.gebhard.qa.model.Vote"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.gebhard.qa.model.Vote"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.gebhard.qa.model.Vote"),
			true);
	public static long ANSWERID_COLUMN_BITMASK = 1L;
	public static long QUESTIONID_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.gebhard.qa.model.Vote"));

	public VoteModelImpl() {
	}

	public long getPrimaryKey() {
		return _voteId;
	}

	public void setPrimaryKey(long primaryKey) {
		setVoteId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_voteId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Vote.class;
	}

	public String getModelClassName() {
		return Vote.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("voteId", getVoteId());
		attributes.put("questionId", getQuestionId());
		attributes.put("answerId", getAnswerId());
		attributes.put("userId", getUserId());
		attributes.put("plusOne", getPlusOne());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long voteId = (Long)attributes.get("voteId");

		if (voteId != null) {
			setVoteId(voteId);
		}

		Long questionId = (Long)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		Long answerId = (Long)attributes.get("answerId");

		if (answerId != null) {
			setAnswerId(answerId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Boolean plusOne = (Boolean)attributes.get("plusOne");

		if (plusOne != null) {
			setPlusOne(plusOne);
		}
	}

	public long getVoteId() {
		return _voteId;
	}

	public void setVoteId(long voteId) {
		_voteId = voteId;
	}

	public long getQuestionId() {
		return _questionId;
	}

	public void setQuestionId(long questionId) {
		_columnBitmask |= QUESTIONID_COLUMN_BITMASK;

		if (!_setOriginalQuestionId) {
			_setOriginalQuestionId = true;

			_originalQuestionId = _questionId;
		}

		_questionId = questionId;
	}

	public long getOriginalQuestionId() {
		return _originalQuestionId;
	}

	public long getAnswerId() {
		return _answerId;
	}

	public void setAnswerId(long answerId) {
		_columnBitmask |= ANSWERID_COLUMN_BITMASK;

		if (!_setOriginalAnswerId) {
			_setOriginalAnswerId = true;

			_originalAnswerId = _answerId;
		}

		_answerId = answerId;
	}

	public long getOriginalAnswerId() {
		return _originalAnswerId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public boolean getPlusOne() {
		return _plusOne;
	}

	public boolean isPlusOne() {
		return _plusOne;
	}

	public void setPlusOne(boolean plusOne) {
		_plusOne = plusOne;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Vote.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Vote toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Vote)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		VoteImpl voteImpl = new VoteImpl();

		voteImpl.setVoteId(getVoteId());
		voteImpl.setQuestionId(getQuestionId());
		voteImpl.setAnswerId(getAnswerId());
		voteImpl.setUserId(getUserId());
		voteImpl.setPlusOne(getPlusOne());

		voteImpl.resetOriginalValues();

		return voteImpl;
	}

	public int compareTo(Vote vote) {
		long primaryKey = vote.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Vote vote = null;

		try {
			vote = (Vote)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = vote.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		VoteModelImpl voteModelImpl = this;

		voteModelImpl._originalQuestionId = voteModelImpl._questionId;

		voteModelImpl._setOriginalQuestionId = false;

		voteModelImpl._originalAnswerId = voteModelImpl._answerId;

		voteModelImpl._setOriginalAnswerId = false;

		voteModelImpl._originalUserId = voteModelImpl._userId;

		voteModelImpl._setOriginalUserId = false;

		voteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Vote> toCacheModel() {
		VoteCacheModel voteCacheModel = new VoteCacheModel();

		voteCacheModel.voteId = getVoteId();

		voteCacheModel.questionId = getQuestionId();

		voteCacheModel.answerId = getAnswerId();

		voteCacheModel.userId = getUserId();

		voteCacheModel.plusOne = getPlusOne();

		return voteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{voteId=");
		sb.append(getVoteId());
		sb.append(", questionId=");
		sb.append(getQuestionId());
		sb.append(", answerId=");
		sb.append(getAnswerId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", plusOne=");
		sb.append(getPlusOne());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("it.gebhard.qa.model.Vote");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>voteId</column-name><column-value><![CDATA[");
		sb.append(getVoteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerId</column-name><column-value><![CDATA[");
		sb.append(getAnswerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>plusOne</column-name><column-value><![CDATA[");
		sb.append(getPlusOne());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Vote.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Vote.class
		};
	private long _voteId;
	private long _questionId;
	private long _originalQuestionId;
	private boolean _setOriginalQuestionId;
	private long _answerId;
	private long _originalAnswerId;
	private boolean _setOriginalAnswerId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private boolean _plusOne;
	private long _columnBitmask;
	private Vote _escapedModelProxy;
}